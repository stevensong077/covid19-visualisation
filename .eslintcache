[{"/Users/steven/Documents/covid19-visualisation/src/index.js":"1","/Users/steven/Documents/covid19-visualisation/src/App.js":"2","/Users/steven/Documents/covid19-visualisation/src/redux/store.js":"3","/Users/steven/Documents/covid19-visualisation/src/redux/reducers.js":"4","/Users/steven/Documents/covid19-visualisation/src/redux/sagas.js":"5","/Users/steven/Documents/covid19-visualisation/src/redux/data/saga.js":"6","/Users/steven/Documents/covid19-visualisation/src/redux/data/reducer.js":"7","/Users/steven/Documents/covid19-visualisation/src/redux/data/actions.js":"8","/Users/steven/Documents/covid19-visualisation/src/apis/dataApi.js":"9","/Users/steven/Documents/covid19-visualisation/src/config/index.js":"10","/Users/steven/Documents/covid19-visualisation/src/container/newCases.js":"11","/Users/steven/Documents/covid19-visualisation/src/container/activeCases.js":"12","/Users/steven/Documents/covid19-visualisation/src/container/map.js":"13"},{"size":270,"mtime":1611096986407,"results":"14","hashOfConfig":"15"},{"size":8071,"mtime":1611096986406,"results":"16","hashOfConfig":"15"},{"size":788,"mtime":1611096986408,"results":"17","hashOfConfig":"15"},{"size":100,"mtime":1611096986408,"results":"18","hashOfConfig":"15"},{"size":162,"mtime":1611096986408,"results":"19","hashOfConfig":"15"},{"size":557,"mtime":1611096986408,"results":"20","hashOfConfig":"15"},{"size":580,"mtime":1611096986408,"results":"21","hashOfConfig":"15"},{"size":199,"mtime":1611096986408,"results":"22","hashOfConfig":"15"},{"size":624,"mtime":1611096986407,"results":"23","hashOfConfig":"15"},{"size":237,"mtime":1611881964777,"results":"24","hashOfConfig":"15"},{"size":1409,"mtime":1611096986407,"results":"25","hashOfConfig":"15"},{"size":2869,"mtime":1611096986407,"results":"26","hashOfConfig":"15"},{"size":2373,"mtime":1611096986407,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1jw6oyc",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"30"},"/Users/steven/Documents/covid19-visualisation/src/index.js",[],["60","61"],"/Users/steven/Documents/covid19-visualisation/src/App.js",["62","63"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Table,\n  Spin,\n  Button,\n  Result,\n  Input,\n  Space,\n  Statistic,\n  Card,\n  Row,\n  Col,\n  Typography,\n  Layout\n} from \"antd\";\nimport Highlighter from \"react-highlight-words\";\nimport { SearchOutlined } from \"@ant-design/icons\";\nimport { connect } from \"react-redux\";\nimport dataActions from \"./redux/data/actions\";\nimport \"antd/dist/antd.css\";\nimport BarNew from \"./container/newCases\";\nimport BarActive from \"./container/activeCases\";\nimport Map from \"./container/map\";\nimport { mapKey } from \"./config/index\";\nimport { getlocation } from \"./apis/dataApi\";\n\nconst { Text, Title } = Typography;\nconst {Footer} = Layout\n\nconst App = (props) => {\n  const { datalist, isFetchingData, fetchData } = props;\n  const calculate = () => {\n    let newCases = 0;\n    let activeCases = 0;\n    let total = 0;\n    for (let i = 0; i < datalist.length; i++) {\n      newCases += parseInt(datalist[i].new);\n      activeCases += parseInt(datalist[i].active);\n      total += parseInt(datalist[i].cases);\n      if (i === 0) {\n        setDataDate(datalist[i].data_date);\n      }\n    }\n    setTotalNew(newCases);\n    setTotalActive(activeCases);\n    setTotalCases(total);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    getActiveDataset();\n    calculate();\n  }, [datalist]);\n\n  const [searchText, setSearchText] = useState(\"\");\n  const [searchedColumn, setSearchedColumn] = useState(\"\");\n  const [totalNew, setTotalNew] = useState(0);\n  const [totalActive, setTotalActive] = useState(0);\n  const [totalCases, setTotalCases] = useState(0);\n  const [dataDate, setDataDate] = useState(\"\");\n  const [activeDataset, setActiveDataset] = useState([]);\n  let searchInput = \"\";\n\n  const getActiveDataset = async () => {\n    let newArray = [];\n    for (let i = 0; i < datalist.length; i++) {\n      if (datalist[i].active !== 0) {\n        newArray.push({\n          post: JSON.stringify(datalist[i].postcode),\n          suburbs: (await getlocation(datalist[i].postcode)).data,\n          cases: parseInt(datalist[i].active),\n        });\n      }\n    }\n    setActiveDataset(newArray);\n  };\n\n  const getColumnSearchProps = (dataIndex) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => {\n            searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}\n          style={{ width: 188, marginBottom: 8, display: \"block\" }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n          </Button>\n          <Button\n            onClick={() => handleReset(clearFilters)}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Reset\n          </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: (filtered) => (\n      <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex]\n        ? record[dataIndex]\n            .toString()\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        : \"\",\n    onFilterDropdownVisibleChange: (visible) => {\n      if (visible) {\n        setTimeout(() => searchInput.select(), 100);\n      }\n    },\n    render: (text) =>\n      searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: \"#ffc069\", padding: 0 }}\n          searchWords={[searchText]}\n          autoEscape\n          textToHighlight={text ? text.toString() : \"\"}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  const handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    setSearchText(selectedKeys[0]);\n    setSearchedColumn(dataIndex);\n  };\n\n  const handleReset = (clearFilters) => {\n    clearFilters();\n    setSearchText(\"\");\n  };\n\n  const columns = [\n    {\n      title: \"Postcode\",\n      dataIndex: \"postcode\",\n      key: \"postcode\",\n      ...getColumnSearchProps(\"postcode\"),\n    },\n    {\n      title: \"New Cases\",\n      dataIndex: \"new\",\n      key: \"new\",\n      sorter: { compare: (a, b) => a.new - b.new },\n      render: (data) => (\n        <Text type={parseInt(data) !== 0 ? \"danger\" : \"success\"}>{data}</Text>\n      ),\n    },\n    {\n      title: \"Active Cases\",\n      dataIndex: \"active\",\n      key: \"active\",\n      sorter: { compare: (a, b) => a.active - b.active },\n      render: (data) => (\n        <Text type={parseInt(data) !== 0 ? \"danger\" : \"success\"}>{data}</Text>\n      ),\n    },\n    {\n      title: \"Total Cases\",\n      dataIndex: \"cases\",\n      key: \"cases\",\n      sorter: { compare: (a, b) => a.cases - b.cases },\n      render: (data) => (\n        <Text type={parseInt(data) !== 0 ? \"danger\" : \"success\"}>{data}</Text>\n      ),\n    },\n    { title: \"Population\", dataIndex: \"population\" },\n  ];\n\n  return (\n    <>\n      <Spin spinning={isFetchingData}>\n        <Result\n          icon={<></>}\n          title=\"Covid-19 in Victoria\"\n          subTitle={`Covid-19 information of the past 24 hours statewide.  Data date: ${dataDate}`}\n        />\n        <Row gutter={16} style={{ padding: \"0 300px 40px\" }}>\n          <Col span={8}>\n            <Card>\n              <Statistic\n                title=\"New Cases\"\n                value={totalNew}\n                valueStyle={\n                  totalNew === 0 ? { color: \"#3f8600\" } : { color: \"#cf1322\" }\n                }\n              />\n            </Card>\n          </Col>\n          <Col span={8}>\n            <Card>\n              <Statistic\n                title=\"Active Cases\"\n                value={totalActive}\n                valueStyle={\n                  totalActive === 0\n                    ? { color: \"#3f8600\" }\n                    : { color: \"#cf1322\" }\n                }\n              />\n            </Card>\n          </Col>\n          <Col span={8}>\n            <Card>\n              <Statistic\n                title=\"Total Cases\"\n                value={totalCases}\n                valueStyle={{ color: \"#cf1322\" }}\n              />\n            </Card>\n          </Col>\n          <Text type=\"secondary\" style={{ padding: \"30px 10px\" }}>\n            Note: 9998 represent cases acquired overseas . 9999 represent cases\n            acquired interstate.\n          </Text>\n        </Row>\n\n        <Row style={{ padding: \"0 200px 40px\" }}>\n          <Col span={12}>\n            <BarNew data={datalist} />\n          </Col>\n          <Col span={12}>\n            <BarActive data={datalist} />\n          </Col>\n        </Row>\n        <Table\n          dataSource={datalist}\n          columns={columns}\n          style={{ padding: \"0  200px\" }}\n          title={() => \"Search by postcode; Sort by cases\"}\n          bordered={true}\n          rowKey={(record) => record.postcode}\n        />\n        <Card bordered={false} style={{ padding: \"20px 100px 0\" }}>\n          <Title level={4}>Active Cases Distribution</Title>\n          <Map\n            isMarkerShown\n            googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${mapKey}&v=3.exp&libraries=geometry,drawing,places`}\n            loadingElement={<div style={{ height: `80vh` }} />}\n            containerElement={<div style={{ height: `100vh` }} />}\n            mapElement={<div style={{ height: `96vh` }} />}\n            dataset={activeDataset}\n          />\n        </Card>\n        <Footer style={{ textAlign: 'center' }}> 2021 Created by Steven</Footer>\n      </Spin>\n    </>\n  );\n};\nconst { fetchData } = dataActions;\nexport default connect(\n  (state) => {\n    const { datalist, isFetchingData } = state.dataReducer;\n    return { datalist, isFetchingData };\n  },\n  { fetchData }\n)(App);\n","/Users/steven/Documents/covid19-visualisation/src/redux/store.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/reducers.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/sagas.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/data/saga.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/data/reducer.js",[],["64","65"],"/Users/steven/Documents/covid19-visualisation/src/redux/data/actions.js",[],"/Users/steven/Documents/covid19-visualisation/src/apis/dataApi.js",[],"/Users/steven/Documents/covid19-visualisation/src/config/index.js",[],"/Users/steven/Documents/covid19-visualisation/src/container/newCases.js",["66","67","68","69"],"import React, { useState, useEffect } from \"react\";\nimport { Chart, Interval, Coordinate, Axis, getTheme } from \"bizcharts\";\nimport { Typography, Table, Card } from \"antd\";\nconst { Title } = Typography;\n\nconst BarNew = (props) => {\n  const { data } = props;\n  const [dataArray, setDataArray] = useState([]);\n\n  const getArray = () => {\n    let newArray = [];\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].new !== 0) {\n        newArray.push({\n          post: JSON.stringify(data[i].postcode),\n          cases: parseInt(data[i].new),\n        });\n      }\n    }\n    return newArray;\n  };\n\n  useEffect(() => {\n    const result = getArray();\n    setDataArray(result);\n  }, [data]);\n\n  const columns = [\n    {\n      title: \"Postcode\",\n      dataIndex: \"post\",\n      key: \"postcode\",\n    },\n    {\n      title: \"New Cases\",\n      dataIndex: \"cases\",\n      key: \"new\",\n      sorter: { compare: (a, b) => a.new - b.new },\n    },\n  ];\n\n  return (\n    <Card bordered={false} style={{ padding: \"0 80px\" }}>\n      <Title level={4}>New cases</Title>\n      <Table\n        dataSource={dataArray}\n        columns={columns}\n        rowKey={(record) => record.post}\n        style={{ padding: \"20px 0 80px\" }}\n      ></Table>\n      <Chart height={320} width={600} autoFit data={dataArray}>\n        <Interval position=\"post*cases\" color=\"post\" size={80} />\n      </Chart>\n    </Card>\n  );\n};\n\nexport default BarNew;\n","/Users/steven/Documents/covid19-visualisation/src/container/activeCases.js",["70","71","72"],"import React, { useState, useEffect } from \"react\";\nimport { Chart, Interval, Coordinate, Axis, getTheme, Legend } from \"bizcharts\";\nimport { Typography, Card } from \"antd\";\nconst { Title } = Typography;\n\nconst BarActive = (props) => {\n  const { data } = props;\n  const [dataArray, setDataArray] = useState([]);\n  const [percentageArray, setPercentageArray] = useState([]);\n\n  const getArray = () => {\n    let total = 0;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].active !== 0) {\n        total += parseInt(data[i].active);\n      }\n\n      // let percentArray = [];\n      // if (data[i].postcode === 9998) {\n      //   percentArray.push({\n      //     area: \"cases acquired overseas\",\n      //     percents: parseInt(data[i].active) / total,\n      //   })\n      //   percentArray.push({\n      //     area: \"cases acquired locally\",\n      //     percents: 1 - parseInt(data[i].active) / total,\n      //   })\n      // } else if(data[i].postcode === 9999){}\n      // setPercentageArray(percentArray);\n    }\n\n    let newArray = [];\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].active !== 0) {\n        newArray.push({\n          post: JSON.stringify(data[i].postcode),\n          cases: parseInt(data[i].active),\n          percentage: parseFloat(data[i].active / total),\n        });\n      }\n    }\n    return newArray;\n  };\n\n  useEffect(() => {\n    let result = getArray();\n    setDataArray(result);\n  }, [data]);\n\n  const cols = {\n    percentage: {\n      formatter: (val) => {\n        val = val * 100 + \"%\";\n        return val;\n      },\n    },\n  };\n\n  return (\n    <Card bordered={false} style={{ padding: \"0, 50px\" }}>\n      <Title level={4}>Active cases</Title>\n      <Card bordered={false} style={{ padding: \"20px 0 40px\" }}>\n        <Chart height={320} width={600} autoFit data={dataArray}>\n          <Legend visible={false} />\n          <Interval position=\"post*cases\" color=\"post\" />\n        </Chart>\n      </Card>\n      <Chart height={320} width={600} scale={cols} autoFit data={dataArray}>\n        <Coordinate type=\"theta\" radius={0.75} />\n        <Axis visible={false} />\n        <Interval\n          position=\"percentage\"\n          color=\"post\"\n          X\n          adjust=\"stack\"\n          style={{\n            lineWidth: 1,\n            stroke: \"#fff\",\n          }}\n          label={[\n            \"*\",\n            {\n              content: (data) => {\n                return `${data.post}: ${data.percentage.toFixed(4) * 100}%`;\n              },\n            },\n          ]}\n          state={{\n            selected: {\n              style: (t) => {\n                const res = getTheme().geometries.interval.rect.selected.style(\n                  t\n                );\n                return { ...res, fill: \"red\" };\n              },\n            },\n          }}\n        />\n      </Chart>\n    </Card>\n  );\n};\n\nexport default BarActive;\n","/Users/steven/Documents/covid19-visualisation/src/container/map.js",["73"],"import React, { useState } from \"react\";\nimport {\n  GoogleMap,\n  withGoogleMap,\n  Marker,\n  withScriptjs,\n  InfoWindow,\n} from \"react-google-maps\";\nimport { Button } from \"antd\";\nimport { compose, withStateHandlers } from \"recompose\";\n\nconst MapWithAMakredInfoWindow = compose(\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n    }),\n    {\n      onToggleOpen: ({ isOpen }) => () => ({\n        isOpen: !isOpen,\n      }),\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)((props) => {\n  const { dataset } = props;\n  const [openId, setOpenedId] = useState(\"\");\n\n  const calculateLocation = (marker) => {\n    let nameArray = [];\n    let locationLat = 0;\n    let locationLng = 0;\n    if (marker.post === \"9998\") {\n      return {\n        sub: \" Overseas\",\n        lat: -37.8247282,\n        lng: 144.9496289,\n      };\n    } else if (marker.post === \"9999\") {\n      return {\n        sub: \" Interstate\",\n        lat: -37.8118235,\n        lng: 144.9614356,\n      };\n    } else {\n      for (let i = 0; i < marker.suburbs.length; i++) {\n        nameArray.push(\" \" + marker.suburbs[i].name);\n        locationLat += marker.suburbs[i].lat;\n        locationLng += marker.suburbs[i].lng;\n      }\n      return {\n        sub: nameArray,\n        lat: locationLat / marker.suburbs.length,\n        lng: locationLng / marker.suburbs.length,\n      };\n    }\n  };\n\n  return (\n    <>\n      {/* <Button onClick={() => dataset.map((marker) => console.log(marker))}>\n        show\n      </Button> */}\n      <GoogleMap\n        defaultZoom={11}\n        defaultCenter={{ lat: -37.8136, lng: 144.9631 }}\n        gestureHandling={\"greedy\"}\n      >\n        {dataset.map((marker) => (\n          <Marker\n            position={{\n              lat: calculateLocation(marker).lat,\n              lng: calculateLocation(marker).lng,\n            }}\n            key={marker.post}\n            onClick={() => setOpenedId(marker.post)}\n          >\n            {openId === marker.post && (\n              <InfoWindow onCloseClick={() => setOpenedId(\"\")}>\n                <>\n                  {marker.post +\n                    \" : \" +\n                    calculateLocation(marker).sub +\n                    \" : \" +\n                    marker.cases}\n                </>\n              </InfoWindow>\n            )}\n          </Marker>\n        ))}\n      </GoogleMap>\n    </>\n  );\n});\n\nexport default MapWithAMakredInfoWindow;\n",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":51,"column":6,"nodeType":"80","endLine":51,"endColumn":8,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":56,"column":6,"nodeType":"80","endLine":56,"endColumn":16,"suggestions":"83"},{"ruleId":"74","replacedBy":"84"},{"ruleId":"76","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":2,"column":27,"nodeType":"88","messageId":"89","endLine":2,"endColumn":37},{"ruleId":"86","severity":1,"message":"90","line":2,"column":39,"nodeType":"88","messageId":"89","endLine":2,"endColumn":43},{"ruleId":"86","severity":1,"message":"91","line":2,"column":45,"nodeType":"88","messageId":"89","endLine":2,"endColumn":53},{"ruleId":"78","severity":1,"message":"92","line":26,"column":6,"nodeType":"80","endLine":26,"endColumn":12,"suggestions":"93"},{"ruleId":"86","severity":1,"message":"94","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":25},{"ruleId":"86","severity":1,"message":"95","line":9,"column":27,"nodeType":"88","messageId":"89","endLine":9,"endColumn":45},{"ruleId":"78","severity":1,"message":"92","line":48,"column":6,"nodeType":"80","endLine":48,"endColumn":12,"suggestions":"96"},{"ruleId":"86","severity":1,"message":"97","line":9,"column":10,"nodeType":"88","messageId":"89","endLine":9,"endColumn":16},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["100"],"React Hook useEffect has missing dependencies: 'calculate' and 'getActiveDataset'. Either include them or remove the dependency array.",["101"],["98"],["99"],"no-unused-vars","'Coordinate' is defined but never used.","Identifier","unusedVar","'Axis' is defined but never used.","'getTheme' is defined but never used.","React Hook useEffect has a missing dependency: 'getArray'. Either include it or remove the dependency array.",["102"],"'percentageArray' is assigned a value but never used.","'setPercentageArray' is assigned a value but never used.",["103"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"108","fix":"110"},"Update the dependencies array to be: [fetchData]",{"range":"111","text":"112"},"Update the dependencies array to be: [calculate, datalist, getActiveDataset]",{"range":"113","text":"114"},"Update the dependencies array to be: [data, getArray]",{"range":"115","text":"116"},{"range":"117","text":"116"},[1259,1261],"[fetchData]",[1331,1341],"[calculate, datalist, getActiveDataset]",[683,689],"[data, getArray]",[1431,1437]]