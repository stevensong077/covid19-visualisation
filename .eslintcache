[{"/Users/steven/Documents/covid19-visualisation/src/index.js":"1","/Users/steven/Documents/covid19-visualisation/src/App.js":"2","/Users/steven/Documents/covid19-visualisation/src/redux/store.js":"3","/Users/steven/Documents/covid19-visualisation/src/redux/reducers.js":"4","/Users/steven/Documents/covid19-visualisation/src/redux/sagas.js":"5","/Users/steven/Documents/covid19-visualisation/src/redux/data/saga.js":"6","/Users/steven/Documents/covid19-visualisation/src/redux/data/reducer.js":"7","/Users/steven/Documents/covid19-visualisation/src/redux/data/actions.js":"8","/Users/steven/Documents/covid19-visualisation/src/apis/dataApi.js":"9","/Users/steven/Documents/covid19-visualisation/src/config/index.js":"10","/Users/steven/Documents/covid19-visualisation/src/container/newCases.js":"11","/Users/steven/Documents/covid19-visualisation/src/container/activeCases.js":"12","/Users/steven/Documents/covid19-visualisation/src/container/map.js":"13"},{"size":270,"mtime":1609722870569,"results":"14","hashOfConfig":"15"},{"size":8071,"mtime":1610519406509,"results":"16","hashOfConfig":"15"},{"size":788,"mtime":1609722778993,"results":"17","hashOfConfig":"15"},{"size":100,"mtime":1609723160496,"results":"18","hashOfConfig":"15"},{"size":162,"mtime":1609817085496,"results":"19","hashOfConfig":"15"},{"size":557,"mtime":1609809992649,"results":"20","hashOfConfig":"15"},{"size":580,"mtime":1609810280296,"results":"21","hashOfConfig":"15"},{"size":199,"mtime":1609723423334,"results":"22","hashOfConfig":"15"},{"size":624,"mtime":1610435026258,"results":"23","hashOfConfig":"15"},{"size":114,"mtime":1610508009550,"results":"24","hashOfConfig":"15"},{"size":1409,"mtime":1610509101990,"results":"25","hashOfConfig":"15"},{"size":2869,"mtime":1610509160492,"results":"26","hashOfConfig":"15"},{"size":2373,"mtime":1610519063947,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jkj29s",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/steven/Documents/covid19-visualisation/src/index.js",[],["57","58"],"/Users/steven/Documents/covid19-visualisation/src/App.js",["59","60"],"/Users/steven/Documents/covid19-visualisation/src/redux/store.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/reducers.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/sagas.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/data/saga.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/data/reducer.js",[],"/Users/steven/Documents/covid19-visualisation/src/redux/data/actions.js",[],"/Users/steven/Documents/covid19-visualisation/src/apis/dataApi.js",[],"/Users/steven/Documents/covid19-visualisation/src/config/index.js",[],"/Users/steven/Documents/covid19-visualisation/src/container/newCases.js",["61","62","63","64"],"import React, { useState, useEffect } from \"react\";\nimport { Chart, Interval, Coordinate, Axis, getTheme } from \"bizcharts\";\nimport { Typography, Table, Card } from \"antd\";\nconst { Title } = Typography;\n\nconst BarNew = (props) => {\n  const { data } = props;\n  const [dataArray, setDataArray] = useState([]);\n\n  const getArray = () => {\n    let newArray = [];\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].new !== 0) {\n        newArray.push({\n          post: JSON.stringify(data[i].postcode),\n          cases: parseInt(data[i].new),\n        });\n      }\n    }\n    return newArray;\n  };\n\n  useEffect(() => {\n    const result = getArray();\n    setDataArray(result);\n  }, [data]);\n\n  const columns = [\n    {\n      title: \"Postcode\",\n      dataIndex: \"post\",\n      key: \"postcode\",\n    },\n    {\n      title: \"New Cases\",\n      dataIndex: \"cases\",\n      key: \"new\",\n      sorter: { compare: (a, b) => a.new - b.new },\n    },\n  ];\n\n  return (\n    <Card bordered={false} style={{ padding: \"0 80px\" }}>\n      <Title level={4}>New cases</Title>\n      <Table\n        dataSource={dataArray}\n        columns={columns}\n        rowKey={(record) => record.post}\n        style={{ padding: \"20px 0 80px\" }}\n      ></Table>\n      <Chart height={320} width={600} autoFit data={dataArray}>\n        <Interval position=\"post*cases\" color=\"post\" size={80} />\n      </Chart>\n    </Card>\n  );\n};\n\nexport default BarNew;\n","/Users/steven/Documents/covid19-visualisation/src/container/activeCases.js",["65","66","67"],"import React, { useState, useEffect } from \"react\";\nimport { Chart, Interval, Coordinate, Axis, getTheme, Legend } from \"bizcharts\";\nimport { Typography, Card } from \"antd\";\nconst { Title } = Typography;\n\nconst BarActive = (props) => {\n  const { data } = props;\n  const [dataArray, setDataArray] = useState([]);\n  const [percentageArray, setPercentageArray] = useState([]);\n\n  const getArray = () => {\n    let total = 0;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].active !== 0) {\n        total += parseInt(data[i].active);\n      }\n\n      // let percentArray = [];\n      // if (data[i].postcode === 9998) {\n      //   percentArray.push({\n      //     area: \"cases acquired overseas\",\n      //     percents: parseInt(data[i].active) / total,\n      //   })\n      //   percentArray.push({\n      //     area: \"cases acquired locally\",\n      //     percents: 1 - parseInt(data[i].active) / total,\n      //   })\n      // } else if(data[i].postcode === 9999){}\n      // setPercentageArray(percentArray);\n    }\n\n    let newArray = [];\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].active !== 0) {\n        newArray.push({\n          post: JSON.stringify(data[i].postcode),\n          cases: parseInt(data[i].active),\n          percentage: parseFloat(data[i].active / total),\n        });\n      }\n    }\n    return newArray;\n  };\n\n  useEffect(() => {\n    let result = getArray();\n    setDataArray(result);\n  }, [data]);\n\n  const cols = {\n    percentage: {\n      formatter: (val) => {\n        val = val * 100 + \"%\";\n        return val;\n      },\n    },\n  };\n\n  return (\n    <Card bordered={false} style={{ padding: \"0, 50px\" }}>\n      <Title level={4}>Active cases</Title>\n      <Card bordered={false} style={{ padding: \"20px 0 40px\" }}>\n        <Chart height={320} width={600} autoFit data={dataArray}>\n          <Legend visible={false} />\n          <Interval position=\"post*cases\" color=\"post\" />\n        </Chart>\n      </Card>\n      <Chart height={320} width={600} scale={cols} autoFit data={dataArray}>\n        <Coordinate type=\"theta\" radius={0.75} />\n        <Axis visible={false} />\n        <Interval\n          position=\"percentage\"\n          color=\"post\"\n          X\n          adjust=\"stack\"\n          style={{\n            lineWidth: 1,\n            stroke: \"#fff\",\n          }}\n          label={[\n            \"*\",\n            {\n              content: (data) => {\n                return `${data.post}: ${data.percentage.toFixed(4) * 100}%`;\n              },\n            },\n          ]}\n          state={{\n            selected: {\n              style: (t) => {\n                const res = getTheme().geometries.interval.rect.selected.style(\n                  t\n                );\n                return { ...res, fill: \"red\" };\n              },\n            },\n          }}\n        />\n      </Chart>\n    </Card>\n  );\n};\n\nexport default BarActive;\n","/Users/steven/Documents/covid19-visualisation/src/container/map.js",["68"],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":51,"column":6,"nodeType":"75","endLine":51,"endColumn":8,"suggestions":"76"},{"ruleId":"73","severity":1,"message":"77","line":56,"column":6,"nodeType":"75","endLine":56,"endColumn":16,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":2,"column":27,"nodeType":"81","messageId":"82","endLine":2,"endColumn":37},{"ruleId":"79","severity":1,"message":"83","line":2,"column":39,"nodeType":"81","messageId":"82","endLine":2,"endColumn":43},{"ruleId":"79","severity":1,"message":"84","line":2,"column":45,"nodeType":"81","messageId":"82","endLine":2,"endColumn":53},{"ruleId":"73","severity":1,"message":"85","line":26,"column":6,"nodeType":"75","endLine":26,"endColumn":12,"suggestions":"86"},{"ruleId":"79","severity":1,"message":"87","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":25},{"ruleId":"79","severity":1,"message":"88","line":9,"column":27,"nodeType":"81","messageId":"82","endLine":9,"endColumn":45},{"ruleId":"73","severity":1,"message":"85","line":48,"column":6,"nodeType":"75","endLine":48,"endColumn":12,"suggestions":"89"},{"ruleId":"79","severity":1,"message":"90","line":9,"column":10,"nodeType":"81","messageId":"82","endLine":9,"endColumn":16},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["93"],"React Hook useEffect has missing dependencies: 'calculate' and 'getActiveDataset'. Either include them or remove the dependency array.",["94"],"no-unused-vars","'Coordinate' is defined but never used.","Identifier","unusedVar","'Axis' is defined but never used.","'getTheme' is defined but never used.","React Hook useEffect has a missing dependency: 'getArray'. Either include it or remove the dependency array.",["95"],"'percentageArray' is assigned a value but never used.","'setPercentageArray' is assigned a value but never used.",["96"],"'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},"Update the dependencies array to be: [fetchData]",{"range":"104","text":"105"},"Update the dependencies array to be: [calculate, datalist, getActiveDataset]",{"range":"106","text":"107"},"Update the dependencies array to be: [data, getArray]",{"range":"108","text":"109"},{"range":"110","text":"109"},[1259,1261],"[fetchData]",[1331,1341],"[calculate, datalist, getActiveDataset]",[683,689],"[data, getArray]",[1431,1437]]